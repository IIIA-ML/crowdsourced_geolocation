data {
  int<lower=1> N; // Number of points to sample
  array[N] real x; // Positions of the points to sample
  real alpha; // Controls the spread of the functions generated by the GP. The smaller the alpha, the smaller the range in y's.
  real rho;   // Controls the variability of the functions generated by the GP. The smaller the rho, the larger the variability.
  real sigma; // Controls the randomness of the functions. The larger the sigma, the less continuous the generated functions.  
  real mu_0;  // The average values of the function.
}

transformed data {
  vector[N] mu = rep_vector(mu_0, N);
  matrix[N, N] L;
  matrix[N, N] K = cov_exp_quad(x, alpha, rho) + diag_matrix(rep_vector(sigma , N));
  L = cholesky_decompose(K);
}

//parameters {
//  vector[N] y;
//}

//model {
//    //y ~ multi_normal_cholesky(mu,L);
//    y ~ multi_normal(mu,K);
//}

generated quantities {
    vector[N] y;
    y =  multi_normal_cholesky_rng(mu,L);
}