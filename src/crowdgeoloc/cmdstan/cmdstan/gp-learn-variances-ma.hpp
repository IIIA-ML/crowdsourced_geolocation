
// Code generated by stanc v2.31.0
#include <stan/model/model_header.hpp>
namespace gp_learn_variances_ma_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 171> locations_array__ = 
{" (found before start of program)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 65, column 3 to column 35)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 147, column 4 to column 20)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 148, column 4 to column 26)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 149, column 4 to column 30)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 150, column 4 to column 34)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 151, column 4 to column 24)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 152, column 4 to column 26)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 153, column 4 to column 20)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 154, column 4 to column 13)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 157, column 8 to column 25)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 158, column 8 to column 25)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 161, column 8 to column 16)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 163, column 12 to column 42)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 164, column 12 to column 27)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 165, column 12 to column 41)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 166, column 12 to column 25)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 162, column 24 to line 167, column 9)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 162, column 8 to line 167, column 9)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 168, column 8 to column 23)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 170, column 12 to column 56)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 169, column 24 to line 171, column 9)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 169, column 8 to line 171, column 9)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 172, column 8 to column 56)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 156, column 20 to line 173, column 5)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 156, column 4 to line 173, column 5)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 176, column 8 to column 22)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 177, column 8 to column 24)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 175, column 20 to line 178, column 5)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 175, column 4 to line 178, column 5)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 180, column 4 to column 11)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 181, column 4 to column 11)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 183, column 8 to column 25)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 184, column 8 to column 21)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 185, column 8 to column 37)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 186, column 8 to column 23)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 187, column 8 to column 38)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 182, column 20 to line 188, column 5)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 182, column 4 to line 188, column 5)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 190, column 8 to column 40)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 189, column 20 to line 191, column 5)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 189, column 4 to line 191, column 5)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 192, column 4 to column 24)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 73, column 10 to column 11)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 73, column 4 to column 30)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 78, column 11 to column 12)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 78, column 4 to column 26)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 79, column 11 to column 12)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 79, column 4 to column 30)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 80, column 11 to column 12)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 80, column 4 to column 34)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 81, column 10 to column 11)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 81, column 4 to column 30)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 82, column 10 to column 11)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 82, column 4 to column 32)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 83, column 10 to column 11)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 83, column 4 to column 31)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 84, column 10 to column 11)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 84, column 4 to column 20)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 85, column 4 to column 13)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 88, column 8 to column 25)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 89, column 8 to column 25)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 92, column 8 to column 16)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 94, column 12 to column 42)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 95, column 12 to column 27)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 96, column 12 to column 41)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 97, column 12 to column 25)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 93, column 24 to line 98, column 9)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 93, column 8 to line 98, column 9)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 100, column 12 to column 31)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 99, column 20 to line 101, column 9)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 99, column 8 to line 101, column 9)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 102, column 8 to column 23)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 104, column 12 to column 56)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 103, column 24 to line 105, column 9)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 103, column 8 to line 105, column 9)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 106, column 8 to column 56)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 107, column 8 to column 28)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 108, column 8 to column 30)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 87, column 20 to line 109, column 5)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 87, column 4 to line 109, column 5)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 111, column 4 to column 11)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 112, column 4 to column 11)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 113, column 4 to column 11)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 115, column 8 to column 21)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 116, column 8 to column 21)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 117, column 8 to column 37)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 120, column 16 to column 39)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 121, column 16 to column 54)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 119, column 39 to line 122, column 13)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 119, column 12 to line 122, column 13)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 118, column 77 to line 123, column 9)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 118, column 8 to line 123, column 9)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 114, column 20 to line 124, column 5)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 114, column 4 to line 124, column 5)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 128, column 12 to column 50)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 127, column 36 to line 129, column 9)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 127, column 8 to line 129, column 9)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 130, column 8 to column 69)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 126, column 22 to line 131, column 5)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 126, column 4 to line 131, column 5)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 136, column 8 to column 21)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 137, column 8 to column 77)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 135, column 20 to line 138, column 5)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 135, column 4 to line 138, column 5)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 2, column 2 to column 17)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 3, column 2 to column 17)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 4, column 2 to column 17)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 6, column 8 to column 9)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 6, column 2 to column 36)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 7, column 8 to column 9)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 7, column 2 to column 36)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 8, column 8 to column 9)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 8, column 2 to column 20)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 10, column 2 to column 17)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 16, column 4 to column 35)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 17, column 10 to column 11)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 17, column 4 to column 34)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 19, column 8 to column 36)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 18, column 20 to line 20, column 5)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 18, column 4 to line 20, column 5)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 22, column 10 to column 11)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 22, column 4 to column 24)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 23, column 10 to column 11)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 23, column 4 to column 23)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 28, column 8 to column 21)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 29, column 8 to column 23)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 27, column 20 to line 30, column 5)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 27, column 4 to line 30, column 5)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 32, column 8 to column 29)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 33, column 8 to column 33)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 31, column 20 to line 34, column 5)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 31, column 4 to line 34, column 5)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 36, column 8 to column 41)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 35, column 20 to line 37, column 5)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 35, column 4 to line 37, column 5)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 39, column 10 to column 13)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 39, column 4 to column 36)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 41, column 10 to column 11)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 41, column 4 to column 30)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 42, column 10 to column 11)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 42, column 4 to column 27)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 43, column 11 to column 12)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 43, column 4 to column 39)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 44, column 11 to column 12)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 44, column 4 to column 39)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 46, column 10 to column 11)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 46, column 4 to column 28)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 48, column 4 to column 28)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 50, column 8 to column 27)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 51, column 8 to column 69)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 49, column 20 to line 52, column 5)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 49, column 4 to line 52, column 5)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 54, column 8 to column 25)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 55, column 8 to column 58)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 56, column 8 to column 37)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 57, column 8 to column 35)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 58, column 8 to column 41)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 59, column 8 to column 41)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 60, column 8 to column 28)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 53, column 20 to line 61, column 5)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 53, column 4 to line 61, column 5)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 65, column 9 to column 10)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 65, column 11 to column 12)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 147, column 10 to column 11)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 148, column 11 to column 12)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 149, column 11 to column 12)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 150, column 11 to column 12)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 151, column 10 to column 11)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 152, column 10 to column 11)",
 " (in '/home/rocco/crowd_geoloc_https/src/crowdgeoloc/cmdstan/cmdstan/gp-learn-variances-ma.stan', line 153, column 10 to column 11)"};




class gp_learn_variances_ma_model final : public model_base_crtp<gp_learn_variances_ma_model> {

 private:
  int w;
  int t;
  int a;
  std::vector<int> t_A;
  std::vector<int> w_A;
  std::vector<double> ann;
  int l;
  double kappa_;
  std::vector<double> x_grid;
  std::vector<int> counts;
  std::vector<double> mean;
  std::vector<int> start_task_index;
  std::vector<double> ordered_ann;
  std::vector<int> ordered_w;
  std::vector<int> ordered_to_unordered;
  std::vector<int> unordered_to_ordered;
  std::vector<int> tmp_counts; 
  
 
 public:
  ~gp_learn_variances_ma_model() { }
  
  inline std::string model_name() const final { return "gp_learn_variances_ma_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.31.0", "stancflags = "};
  }
  
  
  gp_learn_variances_ma_model(stan::io::var_context& context__,
                              unsigned int random_seed__ = 0,
                              std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "gp_learn_variances_ma_model_namespace::gp_learn_variances_ma_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 105;
      context__.validate_dims("data initialization","w","int",
           std::vector<size_t>{});
      w = std::numeric_limits<int>::min();
      
      
      current_statement__ = 105;
      w = context__.vals_i("w")[(1 - 1)];
      current_statement__ = 105;
      stan::math::check_greater_or_equal(function__, "w", w, 1);
      current_statement__ = 106;
      context__.validate_dims("data initialization","t","int",
           std::vector<size_t>{});
      t = std::numeric_limits<int>::min();
      
      
      current_statement__ = 106;
      t = context__.vals_i("t")[(1 - 1)];
      current_statement__ = 106;
      stan::math::check_greater_or_equal(function__, "t", t, 1);
      current_statement__ = 107;
      context__.validate_dims("data initialization","a","int",
           std::vector<size_t>{});
      a = std::numeric_limits<int>::min();
      
      
      current_statement__ = 107;
      a = context__.vals_i("a")[(1 - 1)];
      current_statement__ = 107;
      stan::math::check_greater_or_equal(function__, "a", a, 1);
      current_statement__ = 108;
      stan::math::validate_non_negative_index("t_A", "a", a);
      current_statement__ = 109;
      context__.validate_dims("data initialization","t_A","int",
           std::vector<size_t>{static_cast<size_t>(a)});
      t_A = std::vector<int>(a, std::numeric_limits<int>::min());
      
      
      current_statement__ = 109;
      t_A = context__.vals_i("t_A");
      current_statement__ = 109;
      stan::math::check_greater_or_equal(function__, "t_A", t_A, 1);
      current_statement__ = 109;
      stan::math::check_less_or_equal(function__, "t_A", t_A, t);
      current_statement__ = 110;
      stan::math::validate_non_negative_index("w_A", "a", a);
      current_statement__ = 111;
      context__.validate_dims("data initialization","w_A","int",
           std::vector<size_t>{static_cast<size_t>(a)});
      w_A = std::vector<int>(a, std::numeric_limits<int>::min());
      
      
      current_statement__ = 111;
      w_A = context__.vals_i("w_A");
      current_statement__ = 111;
      stan::math::check_greater_or_equal(function__, "w_A", w_A, 1);
      current_statement__ = 111;
      stan::math::check_less_or_equal(function__, "w_A", w_A, w);
      current_statement__ = 112;
      stan::math::validate_non_negative_index("ann", "a", a);
      current_statement__ = 113;
      context__.validate_dims("data initialization","ann","double",
           std::vector<size_t>{static_cast<size_t>(a)});
      ann = std::vector<double>(a, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 113;
      ann = context__.vals_r("ann");
      current_statement__ = 114;
      context__.validate_dims("data initialization","l","int",
           std::vector<size_t>{});
      l = std::numeric_limits<int>::min();
      
      
      current_statement__ = 114;
      l = context__.vals_i("l")[(1 - 1)];
      current_statement__ = 114;
      stan::math::check_greater_or_equal(function__, "l", l, 2);
      current_statement__ = 115;
      kappa_ = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 115;
      kappa_ = ((5. * (l - 1.)) * (l - 1.));
      current_statement__ = 116;
      stan::math::validate_non_negative_index("x_grid", "l", l);
      current_statement__ = 117;
      x_grid = 
        std::vector<double>(l, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 120;
      for (int l_ = 1; l_ <= l; ++l_) {
        current_statement__ = 118;
        stan::model::assign(x_grid, ((l_ - 1.) / (l - 1.)),
          "assigning variable x_grid", stan::model::index_uni(l_));
      }
      current_statement__ = 121;
      stan::math::validate_non_negative_index("counts", "t", t);
      current_statement__ = 122;
      counts = std::vector<int>(t, std::numeric_limits<int>::min());
      
      
      current_statement__ = 123;
      stan::math::validate_non_negative_index("mean", "t", t);
      current_statement__ = 124;
      mean = 
        std::vector<double>(t, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 128;
      for (int t_ = 1; t_ <= t; ++t_) {
        current_statement__ = 125;
        stan::model::assign(mean, 0,
          "assigning variable mean", stan::model::index_uni(t_));
        current_statement__ = 126;
        stan::model::assign(counts, 0,
          "assigning variable counts", stan::model::index_uni(t_));
      }
      current_statement__ = 132;
      for (int a_ = 1; a_ <= a; ++a_) {
        current_statement__ = 129;
        stan::model::assign(counts,
          (stan::model::rvalue(counts, "counts",
             stan::model::index_uni(stan::model::rvalue(t_A, "t_A",
                                      stan::model::index_uni(a_)))) + 1),
          "assigning variable counts", stan::model::index_uni(stan::model::rvalue(
                                                                t_A, "t_A",
                                                                stan::model::index_uni(a_))));
        current_statement__ = 130;
        stan::model::assign(mean,
          (stan::model::rvalue(mean, "mean",
             stan::model::index_uni(stan::model::rvalue(t_A, "t_A",
                                      stan::model::index_uni(a_)))) +
            stan::model::rvalue(ann, "ann", stan::model::index_uni(a_))),
          "assigning variable mean", stan::model::index_uni(stan::model::rvalue(
                                                              t_A, "t_A",
                                                              stan::model::index_uni(a_))));
      }
      current_statement__ = 135;
      for (int t_ = 1; t_ <= t; ++t_) {
        current_statement__ = 133;
        stan::model::assign(mean,
          (stan::model::rvalue(mean, "mean", stan::model::index_uni(t_)) /
            stan::model::rvalue(counts, "counts", stan::model::index_uni(t_))),
          "assigning variable mean", stan::model::index_uni(t_));
      }
      current_statement__ = 136;
      stan::math::validate_non_negative_index("start_task_index", "t + 1",
                                              (t + 1));
      current_statement__ = 137;
      start_task_index = 
        std::vector<int>((t + 1), std::numeric_limits<int>::min());
      
      
      current_statement__ = 138;
      stan::math::validate_non_negative_index("ordered_ann", "a", a);
      current_statement__ = 139;
      ordered_ann = 
        std::vector<double>(a, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 140;
      stan::math::validate_non_negative_index("ordered_w", "a", a);
      current_statement__ = 141;
      ordered_w = std::vector<int>(a, std::numeric_limits<int>::min());
      
      
      current_statement__ = 142;
      stan::math::validate_non_negative_index("ordered_to_unordered", "a", a);
      current_statement__ = 143;
      ordered_to_unordered = 
        std::vector<int>(a, std::numeric_limits<int>::min());
      
      
      current_statement__ = 144;
      stan::math::validate_non_negative_index("unordered_to_ordered", "a", a);
      current_statement__ = 145;
      unordered_to_ordered = 
        std::vector<int>(a, std::numeric_limits<int>::min());
      
      
      current_statement__ = 146;
      stan::math::validate_non_negative_index("tmp_counts", "t", t);
      current_statement__ = 147;
      tmp_counts = std::vector<int>(t, std::numeric_limits<int>::min());
      
      
      current_statement__ = 148;
      stan::model::assign(start_task_index, 1,
        "assigning variable start_task_index", stan::model::index_uni(1));
      current_statement__ = 152;
      for (int t_ = 1; t_ <= t; ++t_) {
        current_statement__ = 149;
        stan::model::assign(tmp_counts, 0,
          "assigning variable tmp_counts", stan::model::index_uni(t_));
        current_statement__ = 150;
        stan::model::assign(start_task_index,
          (stan::model::rvalue(counts, "counts", stan::model::index_uni(t_))
            +
            stan::model::rvalue(start_task_index, "start_task_index",
              stan::model::index_uni(t_))),
          "assigning variable start_task_index", stan::model::index_uni(
                                                   (t_ + 1)));
      }
      current_statement__ = 161;
      for (int a_ = 1; a_ <= a; ++a_) {
        int t_ = std::numeric_limits<int>::min();
        current_statement__ = 153;
        t_ = stan::model::rvalue(t_A, "t_A", stan::model::index_uni(a_));
        int index = std::numeric_limits<int>::min();
        current_statement__ = 154;
        index = (stan::model::rvalue(start_task_index, "start_task_index",
                   stan::model::index_uni(t_)) +
                  stan::model::rvalue(tmp_counts, "tmp_counts",
                    stan::model::index_uni(t_)));
        current_statement__ = 155;
        stan::model::assign(ordered_ann,
          stan::model::rvalue(ann, "ann", stan::model::index_uni(a_)),
          "assigning variable ordered_ann", stan::model::index_uni(index));
        current_statement__ = 156;
        stan::model::assign(ordered_w,
          stan::model::rvalue(w_A, "w_A", stan::model::index_uni(a_)),
          "assigning variable ordered_w", stan::model::index_uni(index));
        current_statement__ = 157;
        stan::model::assign(ordered_to_unordered, a_,
          "assigning variable ordered_to_unordered", stan::model::index_uni(index));
        current_statement__ = 158;
        stan::model::assign(unordered_to_ordered, index,
          "assigning variable unordered_to_ordered", stan::model::index_uni(a_));
        current_statement__ = 159;
        stan::model::assign(tmp_counts,
          (stan::model::rvalue(tmp_counts, "tmp_counts",
             stan::model::index_uni(t_)) + 1),
          "assigning variable tmp_counts", stan::model::index_uni(t_));
      }
      current_statement__ = 117;
      stan::math::check_greater_or_equal(function__, "x_grid", x_grid, 0);
      current_statement__ = 162;
      stan::math::validate_non_negative_index("y_grid", "w", w);
      current_statement__ = 163;
      stan::math::validate_non_negative_index("y_grid", "l", l);
      current_statement__ = 164;
      stan::math::validate_non_negative_index("x", "t", t);
      current_statement__ = 165;
      stan::math::validate_non_negative_index("sigmas", "a", a);
      current_statement__ = 166;
      stan::math::validate_non_negative_index("inv_sigmas", "a", a);
      current_statement__ = 167;
      stan::math::validate_non_negative_index("ordered_sigmas", "a", a);
      current_statement__ = 168;
      stan::math::validate_non_negative_index("x_sum", "t", t);
      current_statement__ = 169;
      stan::math::validate_non_negative_index("x_denom", "t", t);
      current_statement__ = 170;
      stan::math::validate_non_negative_index("d", "l", l);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = (w * l);
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "gp_learn_variances_ma_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      std::vector<std::vector<local_scalar_t__>> y_grid =
         std::vector<std::vector<local_scalar_t__>>(w, 
           std::vector<local_scalar_t__>(l, DUMMY_VAR__));
      current_statement__ = 1;
      y_grid = in__.template read_constrain_lb<
                 std::vector<std::vector<local_scalar_t__>>, jacobian__>(0,
                 lp__, w, l);
      {
        current_statement__ = 43;
        stan::math::validate_non_negative_index("ordered_x_a", "a", a);
        std::vector<local_scalar_t__> ordered_x_a =
           std::vector<local_scalar_t__>(a, DUMMY_VAR__);
        current_statement__ = 45;
        stan::math::validate_non_negative_index("sigmas", "a", a);
        std::vector<local_scalar_t__> sigmas =
           std::vector<local_scalar_t__>(a, DUMMY_VAR__);
        current_statement__ = 47;
        stan::math::validate_non_negative_index("inv_sigmas", "a", a);
        std::vector<local_scalar_t__> inv_sigmas =
           std::vector<local_scalar_t__>(a, DUMMY_VAR__);
        current_statement__ = 49;
        stan::math::validate_non_negative_index("ordered_sigmas", "a", a);
        std::vector<local_scalar_t__> ordered_sigmas =
           std::vector<local_scalar_t__>(a, DUMMY_VAR__);
        current_statement__ = 51;
        stan::math::validate_non_negative_index("ordered_sum", "a", a);
        std::vector<local_scalar_t__> ordered_sum =
           std::vector<local_scalar_t__>(a, DUMMY_VAR__);
        current_statement__ = 53;
        stan::math::validate_non_negative_index("ordered_denom", "a", a);
        std::vector<local_scalar_t__> ordered_denom =
           std::vector<local_scalar_t__>(a, DUMMY_VAR__);
        current_statement__ = 55;
        stan::math::validate_non_negative_index("ordered_x_a_", "a", a);
        std::vector<local_scalar_t__> ordered_x_a_ =
           std::vector<local_scalar_t__>(a, DUMMY_VAR__);
        current_statement__ = 57;
        stan::math::validate_non_negative_index("d", "l", l);
        std::vector<local_scalar_t__> d =
           std::vector<local_scalar_t__>(l, DUMMY_VAR__);
        local_scalar_t__ d_s = DUMMY_VAR__;
        current_statement__ = 80;
        for (int a_ = 1; a_ <= a; ++a_) {
          int t_ = std::numeric_limits<int>::min();
          current_statement__ = 60;
          t_ = stan::model::rvalue(t_A, "t_A", stan::model::index_uni(a_));
          int w_ = std::numeric_limits<int>::min();
          current_statement__ = 61;
          w_ = stan::model::rvalue(w_A, "w_A", stan::model::index_uni(a_));
          current_statement__ = 62;
          d_s = 0;
          current_statement__ = 68;
          for (int l_ = 1; l_ <= l; ++l_) {
            current_statement__ = 63;
            stan::model::assign(d,
              (stan::model::rvalue(mean, "mean", stan::model::index_uni(t_))
                -
                stan::model::rvalue(x_grid, "x_grid",
                  stan::model::index_uni(l_))),
              "assigning variable d", stan::model::index_uni(l_));
            current_statement__ = 64;
            stan::model::assign(d,
              (stan::model::rvalue(d, "d", stan::model::index_uni(l_)) *
                stan::model::rvalue(d, "d", stan::model::index_uni(l_))),
              "assigning variable d", stan::model::index_uni(l_));
            current_statement__ = 65;
            stan::model::assign(d,
              stan::math::exp(
                (-kappa_ *
                  stan::model::rvalue(d, "d", stan::model::index_uni(l_)))),
              "assigning variable d", stan::model::index_uni(l_));
            current_statement__ = 66;
            d_s = (d_s +
                    stan::model::rvalue(d, "d", stan::model::index_uni(l_)));
          }
          current_statement__ = 71;
          if (stan::math::logical_eq(d_s, 0)) {
            current_statement__ = 69;
            if (pstream__) {
              stan::math::stan_print(pstream__, "d_s:");
              stan::math::stan_print(pstream__, d_s);
              stan::math::stan_print(pstream__, "\n");
            }
          } 
          current_statement__ = 72;
          stan::model::assign(sigmas, 0,
            "assigning variable sigmas", stan::model::index_uni(a_));
          current_statement__ = 75;
          for (int l_ = 1; l_ <= l; ++l_) {
            current_statement__ = 73;
            stan::model::assign(sigmas,
              (stan::model::rvalue(sigmas, "sigmas",
                 stan::model::index_uni(a_)) +
                (stan::model::rvalue(y_grid, "y_grid",
                   stan::model::index_uni(w_), stan::model::index_uni(l_)) *
                  (stan::model::rvalue(d, "d", stan::model::index_uni(l_)) /
                    d_s))),
              "assigning variable sigmas", stan::model::index_uni(a_));
          }
          current_statement__ = 76;
          stan::model::assign(inv_sigmas,
            (1. /
              (stan::model::rvalue(sigmas, "sigmas",
                 stan::model::index_uni(a_)) *
                stan::model::rvalue(sigmas, "sigmas",
                  stan::model::index_uni(a_)))),
            "assigning variable inv_sigmas", stan::model::index_uni(a_));
          current_statement__ = 77;
          stan::model::assign(ordered_sum, 0,
            "assigning variable ordered_sum", stan::model::index_uni(a_));
          current_statement__ = 78;
          stan::model::assign(ordered_denom, 0,
            "assigning variable ordered_denom", stan::model::index_uni(a_));
        }
        local_scalar_t__ v = DUMMY_VAR__;
        int t_ = std::numeric_limits<int>::min();
        int w_ = std::numeric_limits<int>::min();
        current_statement__ = 94;
        for (int a_ = 1; a_ <= a; ++a_) {
          current_statement__ = 84;
          t_ = stan::model::rvalue(t_A, "t_A", stan::model::index_uni(a_));
          current_statement__ = 85;
          w_ = stan::model::rvalue(w_A, "w_A", stan::model::index_uni(a_));
          current_statement__ = 86;
          v = (stan::model::rvalue(inv_sigmas, "inv_sigmas",
                 stan::model::index_uni(a_)) *
                stan::model::rvalue(ann, "ann", stan::model::index_uni(a_)));
          current_statement__ = 92;
          for (int o_a_ = stan::model::rvalue(start_task_index,
                            "start_task_index", stan::model::index_uni(t_));
               o_a_ <= ((stan::model::rvalue(start_task_index,
                           "start_task_index", stan::model::index_uni(t_)) +
                          stan::model::rvalue(counts, "counts",
                            stan::model::index_uni(t_))) - 1);
               ++o_a_) {
            current_statement__ = 90;
            if (stan::math::logical_neq(
                  stan::model::rvalue(ordered_w, "ordered_w",
                    stan::model::index_uni(o_a_)), w_)) {
              current_statement__ = 87;
              stan::model::assign(ordered_sum,
                (stan::model::rvalue(ordered_sum, "ordered_sum",
                   stan::model::index_uni(o_a_)) + v),
                "assigning variable ordered_sum", stan::model::index_uni(o_a_));
              current_statement__ = 88;
              stan::model::assign(ordered_denom,
                (stan::model::rvalue(ordered_denom, "ordered_denom",
                   stan::model::index_uni(o_a_)) +
                  stan::model::rvalue(inv_sigmas, "inv_sigmas",
                    stan::model::index_uni(a_))),
                "assigning variable ordered_denom", stan::model::index_uni(o_a_));
            } 
          }
        }
        current_statement__ = 100;
        for (int o_a_ = 1; o_a_ <= a; ++o_a_) {
          current_statement__ = 97;
          if (stan::math::logical_eq(
                stan::model::rvalue(ordered_denom, "ordered_denom",
                  stan::model::index_uni(o_a_)), 0)) {
            current_statement__ = 95;
            if (pstream__) {
              stan::math::stan_print(pstream__, "Error, division por 0:");
              stan::math::stan_print(pstream__, o_a_);
              stan::math::stan_print(pstream__, "\n");
            }
          } 
          current_statement__ = 98;
          stan::model::assign(ordered_x_a_,
            (stan::model::rvalue(ordered_sum, "ordered_sum",
               stan::model::index_uni(o_a_)) /
              stan::model::rvalue(ordered_denom, "ordered_denom",
                stan::model::index_uni(o_a_))),
            "assigning variable ordered_x_a_", stan::model::index_uni(o_a_));
        }
        current_statement__ = 104;
        for (int a_ = 1; a_ <= a; ++a_) {
          current_statement__ = 101;
          t_ = stan::model::rvalue(t_A, "t_A", stan::model::index_uni(a_));
          current_statement__ = 102;
          lp_accum__.add(
            stan::math::normal_lpdf<propto__>(
              stan::model::rvalue(ann, "ann", stan::model::index_uni(a_)),
              stan::model::rvalue(ordered_x_a_, "ordered_x_a_",
                stan::model::index_uni(stan::model::rvalue(
                                         unordered_to_ordered,
                                         "unordered_to_ordered",
                                         stan::model::index_uni(a_)))),
              stan::model::rvalue(sigmas, "sigmas",
                stan::model::index_uni(a_))));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "gp_learn_variances_ma_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      std::vector<std::vector<double>> y_grid =
         std::vector<std::vector<double>>(w, 
           std::vector<double>(l, std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 1;
      y_grid = in__.template read_constrain_lb<
                 std::vector<std::vector<local_scalar_t__>>, jacobian__>(0,
                 lp__, w, l);
      for (int sym1__ = 1; sym1__ <= l; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= w; ++sym2__) {
          out__.write(y_grid[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<double> x =
         std::vector<double>(t, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> sigmas =
         std::vector<double>(a, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> inv_sigmas =
         std::vector<double>(a, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> ordered_sigmas =
         std::vector<double>(a, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> x_sum =
         std::vector<double>(t, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> x_denom =
         std::vector<double>(t, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> d =
         std::vector<double>(l, std::numeric_limits<double>::quiet_NaN());
      double d_s = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 25;
      for (int a_ = 1; a_ <= a; ++a_) {
        int t_ = std::numeric_limits<int>::min();
        current_statement__ = 10;
        t_ = stan::model::rvalue(t_A, "t_A", stan::model::index_uni(a_));
        int w_ = std::numeric_limits<int>::min();
        current_statement__ = 11;
        w_ = stan::model::rvalue(w_A, "w_A", stan::model::index_uni(a_));
        current_statement__ = 12;
        d_s = 0;
        current_statement__ = 18;
        for (int l_ = 1; l_ <= l; ++l_) {
          current_statement__ = 13;
          stan::model::assign(d,
            (stan::model::rvalue(mean, "mean", stan::model::index_uni(t_)) -
              stan::model::rvalue(x_grid, "x_grid",
                stan::model::index_uni(l_))),
            "assigning variable d", stan::model::index_uni(l_));
          current_statement__ = 14;
          stan::model::assign(d,
            (stan::model::rvalue(d, "d", stan::model::index_uni(l_)) *
              stan::model::rvalue(d, "d", stan::model::index_uni(l_))),
            "assigning variable d", stan::model::index_uni(l_));
          current_statement__ = 15;
          stan::model::assign(d,
            stan::math::exp(
              (-kappa_ *
                stan::model::rvalue(d, "d", stan::model::index_uni(l_)))),
            "assigning variable d", stan::model::index_uni(l_));
          current_statement__ = 16;
          d_s = (d_s +
                  stan::model::rvalue(d, "d", stan::model::index_uni(l_)));
        }
        current_statement__ = 19;
        stan::model::assign(sigmas, 0,
          "assigning variable sigmas", stan::model::index_uni(a_));
        current_statement__ = 22;
        for (int l_ = 1; l_ <= l; ++l_) {
          current_statement__ = 20;
          stan::model::assign(sigmas,
            (stan::model::rvalue(sigmas, "sigmas",
               stan::model::index_uni(a_)) +
              (stan::model::rvalue(y_grid, "y_grid",
                 stan::model::index_uni(w_), stan::model::index_uni(l_)) *
                (stan::model::rvalue(d, "d", stan::model::index_uni(l_)) /
                  d_s))),
            "assigning variable sigmas", stan::model::index_uni(a_));
        }
        current_statement__ = 23;
        stan::model::assign(inv_sigmas,
          (1. /
            (stan::model::rvalue(sigmas, "sigmas",
               stan::model::index_uni(a_)) *
              stan::model::rvalue(sigmas, "sigmas",
                stan::model::index_uni(a_)))),
          "assigning variable inv_sigmas", stan::model::index_uni(a_));
      }
      current_statement__ = 29;
      for (int t_ = 1; t_ <= t; ++t_) {
        current_statement__ = 26;
        stan::model::assign(x_sum, 0,
          "assigning variable x_sum", stan::model::index_uni(t_));
        current_statement__ = 27;
        stan::model::assign(x_denom, 0,
          "assigning variable x_denom", stan::model::index_uni(t_));
      }
      double v = std::numeric_limits<double>::quiet_NaN();
      int w_ = std::numeric_limits<int>::min();
      current_statement__ = 38;
      for (int a_ = 1; a_ <= a; ++a_) {
        int t_ = std::numeric_limits<int>::min();
        current_statement__ = 32;
        t_ = stan::model::rvalue(t_A, "t_A", stan::model::index_uni(a_));
        current_statement__ = 33;
        w_ = stan::model::rvalue(w_A, "w_A", stan::model::index_uni(a_));
        current_statement__ = 34;
        v = (stan::model::rvalue(inv_sigmas, "inv_sigmas",
               stan::model::index_uni(a_)) *
              stan::model::rvalue(ann, "ann", stan::model::index_uni(a_)));
        current_statement__ = 35;
        stan::model::assign(x_sum,
          (stan::model::rvalue(x_sum, "x_sum", stan::model::index_uni(t_)) +
            v), "assigning variable x_sum", stan::model::index_uni(t_));
        current_statement__ = 36;
        stan::model::assign(x_denom,
          (stan::model::rvalue(x_denom, "x_denom",
             stan::model::index_uni(t_)) +
            stan::model::rvalue(inv_sigmas, "inv_sigmas",
              stan::model::index_uni(a_))),
          "assigning variable x_denom", stan::model::index_uni(t_));
      }
      current_statement__ = 41;
      for (int t_ = 1; t_ <= t; ++t_) {
        current_statement__ = 39;
        stan::model::assign(x,
          (stan::model::rvalue(x_sum, "x_sum", stan::model::index_uni(t_)) /
            stan::model::rvalue(x_denom, "x_denom",
              stan::model::index_uni(t_))),
          "assigning variable x", stan::model::index_uni(t_));
      }
      double kappa = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 42;
      kappa = kappa_;
      out__.write(x);
      out__.write(sigmas);
      out__.write(inv_sigmas);
      out__.write(ordered_sigmas);
      out__.write(x_sum);
      out__.write(x_denom);
      out__.write(d);
      out__.write(d_s);
      out__.write(v);
      out__.write(w_);
      out__.write(kappa);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<std::vector<local_scalar_t__>> y_grid =
         std::vector<std::vector<local_scalar_t__>>(w, 
           std::vector<local_scalar_t__>(l, DUMMY_VAR__));
      for (int sym1__ = 1; sym1__ <= l; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= w; ++sym2__) {
          y_grid[(sym2__ - 1)][(sym1__ - 1)] = in__.read<local_scalar_t__>();
        }
      }
      out__.write_free_lb(0, y_grid);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"y_grid", "x", "sigmas", "inv_sigmas",
      "ordered_sigmas", "x_sum", "x_denom", "d", "d_s", "v", "w_", "kappa"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(w)
                                                                   ,
                                                                   static_cast<size_t>(l)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(t)},
      std::vector<size_t>{static_cast<size_t>(a)},
      std::vector<size_t>{static_cast<size_t>(a)},
      std::vector<size_t>{static_cast<size_t>(a)},
      std::vector<size_t>{static_cast<size_t>(t)},
      std::vector<size_t>{static_cast<size_t>(t)},
      std::vector<size_t>{static_cast<size_t>(l)}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{},
      std::vector<size_t>{}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= l; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= w; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "y_grid" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= t; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "x" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= a; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sigmas" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= a; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "inv_sigmas" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= a; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ordered_sigmas" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= t; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "x_sum" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= t; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "x_denom" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= l; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "d" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "d_s");
      param_names__.emplace_back(std::string() + "v");
      param_names__.emplace_back(std::string() + "w_");
      param_names__.emplace_back(std::string() + "kappa");
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= l; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= w; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "y_grid" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= t; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "x" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= a; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sigmas" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= a; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "inv_sigmas" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= a; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ordered_sigmas" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= t; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "x_sum" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= t; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "x_denom" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= l; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "d" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "d_s");
      param_names__.emplace_back(std::string() + "v");
      param_names__.emplace_back(std::string() + "w_");
      param_names__.emplace_back(std::string() + "kappa");
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"y_grid\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(w) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(l) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"x\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(t) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"sigmas\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(a) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"inv_sigmas\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(a) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"ordered_sigmas\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(a) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"x_sum\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(t) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"x_denom\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(t) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"d\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(l) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"d_s\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"v\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"w_\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"kappa\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"y_grid\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(w) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(l) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"x\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(t) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"sigmas\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(a) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"inv_sigmas\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(a) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"ordered_sigmas\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(a) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"x_sum\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(t) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"x_denom\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(t) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"d\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(l) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"d_s\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"v\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"w_\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"kappa\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (w * l);
      const size_t num_transformed = emit_transformed_parameters * 0;
      const size_t num_gen_quantities = emit_generated_quantities * 
  ((((((((((t + a) + a) + a) + t) + t) + l) + 1) + 1) + 1) + 1);
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      std::vector<int> params_i;
      vars = Eigen::Matrix<double, Eigen::Dynamic, 1>::Constant(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (w * l);
      const size_t num_transformed = emit_transformed_parameters * 0;
      const size_t num_gen_quantities = emit_generated_quantities * 
  ((((((((((t + a) + a) + a) + t) + t) + l) + 1) + 1) + 1) + 1);
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      vars = std::vector<double>(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 1> names__{"y_grid"};
      const std::array<Eigen::Index, 1> constrain_param_sizes__{(w * l)};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}

using stan_model = gp_learn_variances_ma_model_namespace::gp_learn_variances_ma_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return gp_learn_variances_ma_model_namespace::profiles__;
}

#endif


